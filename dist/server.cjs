(()=>{"use strict";var o={449:o=>{o.exports=require("pg")},611:o=>{o.exports=require("http")}},t={};function n(r){var e=t[r];if(void 0!==e)return e.exports;var a=t[r]={exports:{}};return o[r](a,a.exports,n),a.exports}const{Pool:r}=n(449),e=new r;function a(o,t,n){o.writeHead(t,{"Content-Type":"application/json"}),o.end(JSON.stringify(n)),function(o,t){console.log(`â†’ Responded with ${o}: ${JSON.stringify(t)}`)}(t,n)}n(611).createServer(async(o,t)=>{!function(o){const t=o.socket.remoteAddress;console.log(`[${(new Date).toISOString()}] ${o.method} ${o.url} from ${t}`)}(o);const{method:n,url:r}=o;"POST"===n&&"/locations"===r?await async function(o,t){const n=[];o.on("data",o=>n.push(o)),o.on("end",async()=>{try{const o=JSON.parse(Buffer.concat(n).toString());if(o.lat&&o.lon){const n=await async function(o){const t=await e.query("SELECT lat, lon FROM locations WHERE lat = $1 AND lon = $2",[o.lat,o.lon]);return t.rows[0]&&t.rows[0].lat===o.lat&&t.rows[0].lon===o.lon?(console.log(`Duplicate location lat: ${o.lat}, lon: ${o.lon}`),!1):(await e.query("INSERT INTO locations (lat, lon, acc, alt, batt, bs, tst, vac, vel, conn, topic, inregions, ssid, bssid)\n     VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)",[o.lat,o.lon,o.acc,o.alt,o.batt,o.bs,o.tst,o.vac,o.vel,o.conn,o.topic,o.inregions,o.ssid,o.bssid]),console.log(`Added location lat: ${o.lat}, lon: ${o.lon}`),!0)}(o);a(t,n?201:409,{message:n?"Location added":"Duplicate location"})}else a(t,400,{error:"Missing lat or lon"})}catch(o){console.error("POST parse error:",o),a(t,400,{error:"Invalid JSON format"})}})}(o,t):"GET"===n&&"/locations/latest"===r?await async function(o,t){try{a(t,200,await async function(){const[o,t]=await Promise.all([e.query("SELECT lat, lon, batt, bs FROM locations ORDER BY id DESC LIMIT 1"),e.query("SELECT COUNT(*) FROM locations")]);return{...o.rows[0],count:parseInt(t.rows[0].count,10)}}())}catch(o){console.error("DB error:",o),a(t,500,{error:"Internal Server Error"})}}(0,t):"GET"===n&&"/health"===r?function(o,t){a(t,200,{status:"ok",uptime:process.uptime(),timestamp:(new Date).toISOString()})}(0,t):a(t,404,{error:"Not Found"})}).listen(3e3,()=>console.log("Server running on port 3000"))})();